## Use the R_HOME indirection to support installations of multiple R version
PKG_CPPFLAGS = -I/usr/local/cuda/include
PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` -lOpenCL

## As an alternative, one can also add this code in a file 'configure'
##
##    PKG_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::LdFlags()"`
## 
##    sed -e "s|@PKG_LIBS@|${PKG_LIBS}|" \
##        src/Makevars.in > src/Makevars
## 
## which together with the following file 'src/Makevars.in'
##
##    PKG_LIBS = @PKG_LIBS@
##
## can be used to create src/Makevars dynamically. This scheme is more
## powerful and can be expanded to also check for and link with other
## libraries.  It should be complemented by a file 'cleanup'
##
##    rm src/Makevars
##
## which removes the autogenerated file src/Makevars. 
##
## Of course, autoconf can also be used to write configure files. This is
## done by a number of packages, but recommended only for more advanced users
## comfortable with autoconf and its related tools.

	
HEADERS =	sod/oCL_DistanceMapper.h \
		sod/oCL_DistanceMapperManager.h \
		R_DimSqueezer.h \
		sod/node_set.h \
		sod/stressInfo.h \
		sod/mappingInfo.h \
		sod/open_cl/oCL_base.h \
		sod/open_cl/clError.h

SOURCES = 	sod/oCL_DistanceMapper.cpp \
		sod/oCL_DistanceMapperManager.cpp \
		R_DimSqueezer.cpp \
		sod/node_set.cpp \
		sod/open_cl/oCL_base.cpp \
		sod/open_cl/clError.cpp \
		Num.cpp \
		RcppExports.cpp \
		rcpp_hello_world.cpp \
		rcpp_module.cpp \
		stdVector.cpp

OBJECTS =	sod/oCL_DistanceMapper.o \
		sod/oCL_DistanceMapperManager.o \
		R_DimSqueezer.o \
		sod/node_set.o \
		sod/open_cl/oCL_base.o \
		sod/open_cl/clError.o \
		Num.o \
		RcppExports.o \
		rcpp_hello_world.o \
		rcpp_module.o \
		stdVector.o

## in order to get it to actually compile everything we need to do:

PKG_CPPFLAGS=-I.

all: $(SHLIB)

clean:
	@rm -f $(OBJECTS)

